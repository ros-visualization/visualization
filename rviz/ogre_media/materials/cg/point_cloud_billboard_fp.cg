struct Output
{
  float4 color : COLOR;
};

Output pointCloudBillboardFP_main(float4 color : COLOR,
                                  float3 tex : TEXCOORD0,

                                  uniform float4 highlight)
{
  float ax = 0.5 - tex.x;
  float ay = 0.5 - tex.y;
  float blend = smoothstep(0.02, 0.05, ay) * (1 - smoothstep(0.95, 0.98, ay)) *
                smoothstep(0.02, 0.05, ax) * (1 - smoothstep(0.95, 0.98, ax));
  float inv_blend = 1.0 - blend;
  float3 col = blend * color.xyz + (sign(0.5 - length(float3(color.xyz))) * float3(0.2, 0.2, 0.2) + color.xyz) * inv_blend;

  col = col + col * highlight.xyz;

  Output OUT;
  OUT.color = float4(col.rgb, color.a);
  return OUT;
}

Output pointCloudBillboardFP_selection(float4 color : COLOR,
                                  float3 tex : TEXCOORD0)
{
  float ax = 0.5 - tex.x;
  float ay = 0.5 - tex.y;
  // Make a hard step from not-picked to picked, unlike display version which is a smooth gradient.
  // "blend" is either 0 or 1, depending if we are in or out of the display area.
  float blend = step(0.035, ay) * (1 - step(0.965, ay)) *
                step(0.035, ax) * (1 - step(0.965, ax));
  float3 col = blend * color.xyz;

  Output OUT;
  // Putting "blend" in alpha so outer edges which the step() cuts off don't occlude other pick values.
  OUT.color = float4(col.rgb, blend);
  return OUT;
}

Output pointCloudBillboardSphereFP_main(float4 color : COLOR,
                                  float3 tex : TEXCOORD0,

                                  uniform float4 highlight)
{
  half rsquared = tex.x*tex.x + tex.y*tex.y;
  half a = (0.25 - rsquared) * 4.0;

  float3 col = lerp(half3(0.8, 0.8, 0.8) * color.xyz, color.xyz, a);

  col = col + col * highlight.xyz;

  Output OUT;
  OUT.color = float4(col, color.a * ceil(a));
  return OUT;
}

// TODO: this function is duplicated in depth.cg.  I don't know how to
//       link these files to avoid the duplication. (hersh)
//
// Take a float in the range [0..1] and parcel it out into 3
// byte-sized (literally) pieces, one in each float of a float3.
float3 pack(float value)
{
  float3 shift = float3(256.0 * 256.0, 256.0, 1.0);
  float3 mask = float3(0.0, 1.0 / 256.0, 1.0 / 256.0);
  float3 ret = frac(value * shift);
  ret -= ret.xxy * mask;
  return ret.zyx;
}

Output pointCloudBillboardSphereFP_depth(float4 color : COLOR,
                                         float3 tex : TEXCOORD0)
{
  float rsquared = tex.x*tex.x + tex.y*tex.y;
  float a = (0.25 - rsquared) * 4.0;

  float3 packed_depth = pack( color.r );

  Output OUT;
  OUT.color = float4(packed_depth.xyz, color.a * ceil(a));
  return OUT;
}

Output pointCloudBillboardSphereFP_Selection_main(float4 color : COLOR,
                                            float3 tex : TEXCOORD0)
{
  float rsquared = tex.x*tex.x + tex.y*tex.y;
  float a = (0.25 - rsquared) * 4.0;

  Output OUT;
  OUT.color = float4(color.xyz, color.a * ceil(a));
  return OUT;
}
