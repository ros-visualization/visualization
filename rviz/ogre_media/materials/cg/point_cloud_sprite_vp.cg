uniform float4x4 worldviewproj_matrix;
uniform float4x4 worldview_matrix;
uniform float4x4 projection_matrix;
uniform float viewport_height_pixels;
uniform float far_clip_distance;

float spriteSizePixels( float4 position, float4 size )
{
  float4 pos_rel_cam = mul(worldview_matrix, position);
  float pixels_per_meter = viewport_height_pixels * abs( projection_matrix._m11 ) * 0.5;

// The following code does this for perspective:
//   point_size = pixels_per_meter * size.x / -pos_rel_cam.z;
// and does this for ortho:
//   point_size = pixels_per_meter * size.x;
// by using the fact that projection_matrix._m32_m33 is [-1 0] for perspective and is [0 1] for ortho.

  float2 distance_factor = float2( 1.0 / pos_rel_cam.z, 1.0 );
  float2 perspective_or_ortho = projection_matrix._m32_m33;
  return pixels_per_meter * size.x * dot( distance_factor, perspective_or_ortho );
}

struct Output
{
  float4 position : POSITION;
  float point_size : PSIZE;
  float4 color : COLOR;
};

Output pointCloudSpriteVP_main(float4 position : POSITION,
                               float4 color : COLOR,
                               uniform float4 alpha,
                               uniform float4 size)
{
  Output OUT;
  OUT.position = mul(worldviewproj_matrix, position);
  OUT.point_size = spriteSizePixels( position, size );
  OUT.color = float4(color.rgb, alpha.x);
  return OUT;
}

Output pointCloudSpriteVP_Selection_main(float4 position : POSITION,
                                         float4 color : COLOR,
                                         uniform float4 pick_color,
                                         uniform float4 size)
{
  Output OUT;
  OUT.position = mul(worldviewproj_matrix, position);
  OUT.point_size = spriteSizePixels( position, size );
  OUT.color = float4( pick_color.xyz, 1.0 );
  return OUT;
}

Output pointCloudSpriteVP_Depth(float4 position : POSITION,
                                float4 color : COLOR,
                                uniform float4 alpha,
                                uniform float4 size)
{
  Output OUT;
  OUT.position = mul(worldviewproj_matrix, position);
  OUT.point_size = spriteSizePixels( position, size );

  float4 pos_rel_view = mul( worldview_matrix, position );
  float normalized_depth = -pos_rel_view.z / far_clip_distance;

  float minimum_alpha = 1.0 / 255;

  OUT.color = float4( normalized_depth, normalized_depth, normalized_depth, step( minimum_alpha, alpha ));
  return OUT;
}
